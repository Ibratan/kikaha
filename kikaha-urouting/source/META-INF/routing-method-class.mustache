package {{packageName}};

import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
{{#isMultiPart}}
import io.undertow.server.handlers.form.FormData;
import io.undertow.server.handlers.form.FormDataParser;
import io.undertow.server.handlers.form.FormParserFactory;
{{/isMultiPart}}
import trip.spi.Provided;
import trip.spi.Singleton;
{{#serviceInterface}}
import trip.spi.ServiceProvider;
{{/serviceInterface}}
import kikaha.core.api.WebResource;
import kikaha.urouting.ResponseWriter;
import kikaha.urouting.RoutingMethodDataProvider;
import kikaha.urouting.RoutingMethodExceptionHandler;

@Singleton( exposedAs=HttpHandler.class )
@WebResource( value="{{httpPath}}", method="{{httpMethod}}" )
public class GeneratedRoutingMethod{{identifier}} implements HttpHandler {

	{{#serviceInterface}}
	@Provided ServiceProvider serviceProvider;
	{{/serviceInterface}}
	@Provided ResponseWriter responseWriter;
	@Provided RoutingMethodDataProvider methodDataProvider;
	@Provided RoutingMethodExceptionHandler exceptionHandler;

	@Override
	public void handleRequest( HttpServerExchange exchange ) throws Exception {
		{{#returnType}}
			if ( exchange.isInIoThread() ) {
				exchange.dispatch(this);
				return;
			}
			else if ( !exchange.isInIoThread() && !exchange.isBlocking() )
				exchange.startBlocking();
		{{/returnType}}
		try {
		{{#serviceInterface}}
			final {{{serviceInterface}}} instance = serviceProvider.load( {{{serviceInterface}}}.class );
		{{/serviceInterface}}
		{{^serviceInterface}}
			final {{{type}}} instance = new {{{type}}}();
		{{/serviceInterface}}
		{{#isMultiPart}}
			final FormDataParser parser = FormParserFactory.builder().build().createParser(exchange);
			final FormData formData = parser.parseBlocking();
		{{/isMultiPart}}
		{{#returnType}}
			final {{{returnType}}} response = instance.{{methodName}}( {{{methodParams}}} );
			{{#responseContentType}}
				responseWriter.write( exchange, "{{responseContentType}}", response );
			{{/responseContentType}}
			{{^responseContentType}}
				responseWriter.write( exchange, response );
			{{/responseContentType}}
		{{/returnType}}
		{{^returnType}}
			instance.{{methodName}}( {{{methodParams}}} );
			responseWriter.write( exchange );
		{{/returnType}}
		} catch ( Throwable cause ) {
			responseWriter.write( exchange, exceptionHandler.handle( cause ) );
		}
	}
}