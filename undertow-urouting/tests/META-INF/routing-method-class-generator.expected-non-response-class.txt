package package io.skullabs.undertow.urouting.samples;

import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import trip.spi.Provided;
import trip.spi.Singleton;
import trip.spi.ServiceProvider;
import io.skullabs.undertow.standalone.api.Configuration;
import io.skullabs.undertow.standalone.api.HandlerTypes;
import io.skullabs.undertow.standalone.api.WebResource;
import io.skullabs.undertow.urouting.ResponseWriter;
import io.skullabs.undertow.urouting.RoutingMethodDataProvider;
import io.skullabs.undertow.urouting.RoutingMethodExceptionHandler;

@Singleton( HttpHandler.class )
@WebResource( value="/hello/world", method="GET" )
public class GeneratedRoutingMethod123 implements HttpHandler {

	@Provided ServiceProvider serviceProvider;
	@Provided ResponseWriter responseWriter;
	@Provided RoutingMethodDataProvider methodDataProvider;
	@Provided RoutingMethodExceptionHandler exceptionHandler;
	@Provided Configuration configuration;

	@Override
	public void handleRequest( HttpServerExchange exchange ) throws Exception {
			if ( HandlerTypes.IO_BOUND.equals( configuration.defaultHandlerType() ) && !exchange.isInIoThread() ) {
				exchange.dispatch(this);
				return;
			}
		try {
			final io.skullabs.undertow.urouting.samples.RetrieveRoutes instance = serviceProvider.load( java.lang.String.class );
			instance.renderRelatoMais(  );
			responseWriter.write( exchange );
		} catch ( Throwable cause ) {
			responseWriter.write( exchange, exceptionHandler.handle( cause ) );
		}
	}
}