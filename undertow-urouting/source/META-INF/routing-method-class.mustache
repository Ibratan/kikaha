package {{packageName}};

import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import trip.spi.Provided;
import trip.spi.Service;
{{#serviceInterface}}
import trip.spi.ServiceProvider;
{{/serviceInterface}}
import io.skullabs.undertow.standalone.api.WebResource;
import io.skullabs.undertow.urouting.ResponseWriter;
import io.skullabs.undertow.urouting.RoutingMethodDataProvider;
import io.skullabs.undertow.urouting.RoutingMethodExceptionHandler;

@Service( HttpHandler.class )
@WebResource( value="{{httpPath}}", method="{{httpMethod}}" )
public class GeneratedRoutingMethod{{identifier}} implements HttpHandler {

	{{#serviceInterface}}
	@Provided ServiceProvider serviceProvider;
	{{/serviceInterface}}
	@Provided ResponseWriter responseWriter;
	@Provided RoutingMethodDataProvider methodDataProvider;
	@Provided RoutingMethodExceptionHandler exceptionHandler;

	@Override
	public void handleRequest( HttpServerExchange exchange ) throws Exception {
		try {
		{{#serviceInterface}}
			final {{type}} instance = serviceProvider.load( {{serviceInterface}}.class );
		{{/serviceInterface}}
		{{^serviceInterface}}
			final {{type}} instance = new {{type}}();
		{{/serviceInterface}}
		{{#returnType}}
			final {{returnType}} response = instance.{{methodName}}( {{{methodParams}}} );
			{{#responseContentType}}
				responseWriter.write( exchange, "{{responseContentType}}", response );
			{{/responseContentType}}
			{{^responseContentType}}
				responseWriter.write( exchange, response );
			{{/responseContentType}}
		{{/returnType}}
		{{^returnType}}
			instance.{{methodName}}( {{{methodParams}}} );
			responseWriter.write( exchange );
		{{/returnType}}
		} catch ( Throwable cause ) {
			responseWriter.write( exchange, exceptionHandler.handle( cause ) );
		}
	}
}