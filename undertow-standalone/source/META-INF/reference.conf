undertow {

	# connection bind configuration
	host: "0.0.0.0"
	port: 9000
	
	# static resources configuration
	resources-path: "webapp"
	
	# default handler configurations
	# available types:
	#   cpu-bound: resources with short slice time of CPU, useful for computations
	#   io-bound:  resources that consumes IO-based resources, e.g: data bases, web crowlers, etc.
	default-handler-type: "cpu-bound"

	# authentication configuration
	auth: {

		# the default implementation for undertow's AuthenticationMechanism
		# it's possible to define new mechanisms just including a line like bellow defined.
		#  mechanisms.my-custom-mechanism = com.example.ClassThatImplementsAuthenticationMechanism
		# or if you prefer
		#  mechanisms {
		#    default = io.skullabs.undertow.standalone.auth.DefaultBasicAuthenticationMechanism
		#    my-custom-mechanism = com.example.ClassThatImplementsAuthenticationMechanism
		#  }

		mechanisms.default = io.skullabs.undertow.standalone.auth.DefaultBasicAuthenticationMechanism
		identity-managers.default = io.skullabs.undertow.standalone.auth.DefaultAdminOnlyIdentityManager
		notification-receivers.default = io.skullabs.undertow.standalone.auth.BasicAuthenticationNotificationReceiver

		default-rule: {
			pattern: "/*"
			identity-manager: "default"
			notification-receiver: "default"
			mechanisms: [ "default" ]
			expected-roles: [ "minimum-access-role" ]
		}

		# active authentication rules.
		# any valid rule will inherit data from default-rule defined before.
		rules: [
			# define authentication rules should have at least a pattern definition.
			# {
			#    pattern: "/*"
			#    identity-manager: "default"
			#    notification-receiver: "default"
			#    mechanisms: [ "default" ]
			#    expected-roles: [ "minimum-access-role" ]
			# }
		]
	}
}