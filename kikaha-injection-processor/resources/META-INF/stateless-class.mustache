package {{packageName}};

@javax.inject.Singleton
@javax.enterprise.inject.Typed( {{typeCanonicalName}}.class )
@kikaha.core.cdi.GeneratedFromStatelessService
public class {{typeName}}Stateless{{identifaction}}
{{#exposedByClass}}
	extends {{{typeCanonicalName}}} {
{{/exposedByClass}}
{{^exposedByClass}}
	extends {{{implementationCanonicalName}}} implements {{{typeCanonicalName}}} {
{{/exposedByClass}}

	@javax.inject.Inject kikaha.core.cdi.ServiceProvider provider;
	{{#exposedMethods}}

	public {{{returnType}}} {{name}}( {{{parametersWithTypesAsString}}} ) {
		try {
			final {{{implementationCanonicalName}}} instance = newInstance();
			try {
				{{#returnable}}
				final {{{returnType}}} returnValue = instance.{{name}}( {{parametersAsString}} );
				return returnValue;
				{{/returnable}}
				{{^returnable}}
				instance.{{name}}( {{parametersAsString}} );
				{{/returnable}}
			} finally {
				preDestroy{{typeName}}{{identifaction}}( instance );
			}
		} catch ( Throwable cause ) {
			throw new RuntimeException( cause );
		}
	}
	{{/exposedMethods}}

	private {{{implementationCanonicalName}}} newInstance() throws kikaha.core.cdi.ServiceProviderException {
		final {{{implementationCanonicalName}}} instance = new {{{implementationCanonicalName}}}();
		provider.provideOn( instance );
		return instance;
	}

	private static void preDestroy{{typeName}}{{identifaction}}(
			final {{{implementationCanonicalName}}} instance ) throws Throwable {
		{{#preDestroyMethods}}
		instance.{{name}}();
		{{/preDestroyMethods}}
	}
}