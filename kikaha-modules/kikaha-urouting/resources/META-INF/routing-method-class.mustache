package {{packageName}};

import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
{{#isMultiPart}}
import io.undertow.server.handlers.form.FormData;
import io.undertow.server.handlers.form.FormDataParser;
import io.undertow.server.handlers.form.FormParserFactory;
{{/isMultiPart}}
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.enterprise.inject.Typed;
import kikaha.core.modules.http.WebResource;
import kikaha.urouting.RoutingMethodResponseWriter;
import kikaha.urouting.RoutingMethodParameterReader;
import kikaha.urouting.RoutingMethodExceptionHandler;
{{#asyncMode}}
import kikaha.urouting.api.AsyncResponse;
{{/asyncMode}}

@Singleton
@Typed( HttpHandler.class )
@WebResource( path="{{httpPath}}", method="{{httpMethod}}" )
public class GeneratedRoutingMethod{{identifier}} implements HttpHandler {

	@Inject RoutingMethodResponseWriter responseWriter;
	@Inject RoutingMethodParameterReader methodDataProvider;
	@Inject RoutingMethodExceptionHandler exceptionHandler;
	
	{{#serviceInterface}}
	@Inject {{{serviceInterface}}} instance;
	{{/serviceInterface}}
	{{^serviceInterface}}
	@Inject {{{type}}} provider;
	{{/serviceInterface}}

	@Override
	public void handleRequest( HttpServerExchange exchange ) throws Exception {
		{{#hasIOBound}}
			if ( exchange.isInIoThread() ) {
				exchange.dispatch(this);
				return;
			}
			else if ( !exchange.isInIoThread() && !exchange.isBlocking() )
				exchange.startBlocking();
		{{/hasIOBound}}
		try {
		{{#isMultiPart}}
			final FormDataParser parser = FormParserFactory.builder().build().createParser(exchange);
			final FormData formData = parser.parseBlocking();
		{{/isMultiPart}}
		{{^asyncMode}}
		{{#returnType}}
			final {{{returnType}}} response = instance.{{methodName}}( {{{methodParams}}} );
			{{#responseContentType}}
				responseWriter.write( exchange, "{{{responseContentType}}}", response );
			{{/responseContentType}}
			{{^responseContentType}}
				responseWriter.write( exchange, response );
			{{/responseContentType}}
		{{/returnType}}
		{{^returnType}}
			instance.{{methodName}}( {{{methodParams}}} );
			responseWriter.write( exchange );
		{{/returnType}}
		{{/asyncMode}}
		{{#asyncMode}}
			{{#responseContentType}}
			final AsyncResponse asyncResponse = new AsyncResponse( exchange, responseWriter, exceptionHandler, "{{{responseContentType}}}" );
			{{/responseContentType}}
			{{^responseContentType}}
			final AsyncResponse asyncResponse = new AsyncResponse( exchange, responseWriter, exceptionHandler );
			{{/responseContentType}}
			exchange.dispatch();
			instance.{{methodName}}( {{{methodParams}}} );
		{{/asyncMode}}
		} catch ( Throwable cause ) {
			responseWriter.write( exchange, exceptionHandler.handle( cause ) );
			{{#asyncMode}}
			exchange.endExchange();
			{{/asyncMode}}
		}
	}
}